Parallel scalable simulations of biological neural networks using
  TensorFlow: A beginner's guide
Neuronal networks are often modeled as systems of coupled, nonlinear,
ordinary or partial differential equations. The number of differential
equations used to model a network increases with the size of the network and
the level of detail used to model individual neurons and synapses. As one
scales up the size of the simulation it becomes important to use powerful
computing platforms. Many tools exist that solve these equations numerically.
However, these tools are often platform specific. There is a high barrier of
entry to developing flexible general purpose code that is platform independent
and supports hardware acceleration on modern computing architectures such as
GPUs/TPUs and Distributed Platforms. TensorFlow is a Python-based open-source
package initially designed for machine learning algorithms, but it presents a
scalable environment for a variety of computations including solving
differential equations using iterative algorithms such as Runge Kutta methods.
In this article, organized as a series of tutorials, we present a simple
exposition of numerical methods to solve ordinary differential equations using
Python and TensorFlow. It consists of a series of Python notebooks that, over
the course of five sessions, will lead novice programmers from writing programs
to integrate simple 1-dimensional differential equations using Python, to
solving a large system (1000's of differential equations) of conductance-based
neurons using a highly parallel and scalable framework. Embedded within the
tutorial is a physiologically realistic implementation of a network in the
insect olfactory system. This system, consisting of multiple neuron and synapse
types, can serve as a template to simulate other networks.